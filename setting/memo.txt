Flutterでアプリを書く？
ios android双方に向けて作る？ PC向けにもBuildする予定
仕組みとしては
スマホ等から定期的に1パケット分に現在接続している接続先のSSID(基本はLTEのキャリアかな？)と電波強度を送信させる＋GPS情報も
サーバー側でそれらのデータを分析し、PLATEAUのモデルデータと結合させて表示用のパケットを作る（ここでも安定性よりもネットワークに負荷をかけないことを優先）
アプリに戻す
留意点としては、とにかくパケット数を減らし、通信容量を削減し、またアプリで重たい処理を行わせてバッテリーを減らさないようにすることの二点を心がける　またデータは基本的にかなりセンシティブなものなのでセキリュティをきちんと確保する
暗号化はRSAで文字列を簡単な暗号化にかけるだけにする（HTTPSなどは用いない？）

表示としては、霧みたいなやつ考えてた
プラトーのチュートリ
https://www.mlit.go.jp/plateau/learning/tpc00/
///
フロントエンド使えそうな記事
https://itnext.io/network-connectivity-in-flutter-15e16c2598f
https://pub.dev/packages/internet_speed_test
https://stackoverflow.com/questions/71672373/how-to-show-network-internet-strength-in-flutter
https://pub.dev/packages/wifi_hunter
これも　それぞれインターネットの情報や速度を取得可能
https://zenn.dev/namioto/articles/3abb0ccf8d8fb6
https://qiita.com/kazutxt/items/1af63e9e32a780daba32
https://note.jpn.pioneer/n/n25998ea6422f
https://zuma-lab.com/posts/flutter-google-maps-with-location
これは小数点3桁までの
GPSのデータを取得可能
高さデータの取得はむずそう
https://qiita.com/kenichiro-yamato/items/ce7d77e9c733c24024d8
https://note.com/blue_69/n/nc7c0269947e0
この辺も参考になりそう
https://www.automation-technology.info/index.php/2021/07/26/post-381/
これは起動時に実行したら楽そう
///

https://zenn.dev/heyhey1028/books/flutter-basics/viewer/getting_started_windows
windowsへの導入方法　むずそう
https://zenn.dev/flutteruniv_dev/articles/20220403-075051-flutter-windows-app
ちゃんとWindows向けにBuild可能
https://qiita.com/kenichiro-yamato/items/12d7199cb2d7812ac0ce
API向けのpost(httpで)は可能っぽい
///

アプリ起動時にフロントエンドでは、自分のGPS位置情報を送りつけて　霧状のマップデータを受信する（imgだけど）
https://qiita.com/murapon/items/0d3006a3bd51cfe104f7
取得するやつ
！！処理としては、1.自分のGPSデータをサーバへ送信　２.サーバーのデータベース（コンバーター）から座標データを取得　３．それをもとにURLを生成する（URLの部分に画像も割り当てる）　４.画像を取得する
///

バックエンド使えそうなやつら(API)
バックエンド結構めんどくさい
http通信でのサーバーとのやり取りの簡易的なもの
https://qiita.com/Atakasu697/items/a160313b156e91a5fdd2
バックエンドで行う処理

バックエンドに使うサービスソフトウェア
Firebase Cloud Functionsがいいかな(下が使えそうなやつ一覧の記事)
https://lhaplus.biz/flutter_server/
Firebase君↓
https://firebase.google.com/?hl=ja
以下糞雑魚説明
・firebaseのプロジェクト作って、CLIインストールしてプロジェクトに接続。Functionsをいい感じにつくってデプロイ。HTTPパッケージを使用してAPIリクエストを送信することでFlutterアプリからCloud Functionを呼び出す。

多分node.jsかruby on railsのほうがいいかも
んでさすがにもうrubyまでさらにやるのはきついので、node.jsでやる
node.jsは18.17.1 lts
 Flutter (Channel stable, 3.13.0, on Microsoft Windows [Version 10.0.22621.1702], locale ja-JP)
https://mash-pro.com/flutter-connect-nodejs/
flutterとnode.jsの接続　macだけどwindows,linuxでもできると思う!

https://dev.classmethod.jp/articles/flutter-getting-start-web-page/
androidは禿げるほど重いのでwebでじっこうするのが吉
chrome必須www

https://itome.team/blog/2023/02/fluttter-scene-memo/
3DのFlutter

https://www.youtube.com/watch?v=Us73IbVsbDc
作例

https://betterprogramming.pub/how-to-connect-flutter-to-node-js-3e13b356c08d
flutterとnode.jsの接続　macだけどwindows,linuxでもできると思う!

https://qiita.com/chooyan_eng/items/7c7298795f2db24b24a5
widgetsの説明
https://docs.flutter.dev/ui/widgets
widgetsの公式ドキュメント
https://api.flutter.dev/flutter/material/BottomAppBar-class.html

https://qiita.com/konifar/items/92307f5dacec90e63d91
トラシュー
https://isub.co.jp/flutter/flutter-http-api/
API
https://tech-blog.yayoi-kk.co.jp/entry/2023/05/23/110000#Flutter%E3%81%A7%E4%BD%9C%E3%82%8Bmisoca%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88

https://qiita.com/kurun_pan/items/f9251b1827ce9dca9e14
コマンド一覧

https://pub.dev/packages/flutter_unity
unityとの連携

https://zenn.dev/dk96424/articles/13f7a0f69b8317#model-viewer%E3%81%A8%E3%81%AF
一応3dモデル
https://web-xr.studio/jp/doc/export

https://u-rth.com/2021unitygltfglb/
unityでglbファイルを作る方法

https://www.crossroad-tech.com/entry/bvh-glb-blender-export

https://www.c-c-j.com/course/psychology/colortherapy/column/column07/
色　心理効果　緑は安心感
https://pub.dev/packages/url_launcher
URLを開くやつ
https://blog.flutteruniv.com/flutter-package-url_launcher/
参考

https://blog.flutteruniv.com/flutter-package-url_launcher/
画面遷移参考
https://itome.team/blog/2023/02/fluttter-scene-memo/
3dモデルを表示する画面

https://web-creates.com/code/blender-threejs/
jsでできるらしい（3Ⅾモデルビューワー）
https://www.geospatial.jp/ckan/dataset/plateau-34100-hirosima-shi-2022
広島市のデータ一覧

webページをwebviewで表示する
https://virment.com/how-to-show-webview-in-flutter-app/
https://www.mlit.go.jp/plateau/learning/tpc12-1/
なんかやり方全部あったwww

mainserverはnode.jsで作る(express)
3dserverはnodejsとthree.jsで作る(http-server)

全部できたら位置をちゃんと把握してできるようにしたい